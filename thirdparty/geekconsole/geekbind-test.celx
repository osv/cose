-- -*- mode: lua -*-
-- lua unit tests for geekconsole
-- Better load this file from luahook

-- interactive test
-- here anonymous function (string as name ) register
gc.registerFunction("lua color chooser test", "colorChooserTest")
gc.registerFunction("lua celestia body test", "celBodyTest")
gc.registerFunction("lua flag test", "gc.flagInteractive demo", "flagTest")
gc.registerFunction("lua file test", 
		    "gc.fileInteractive demo\n" ..
		       "You can select file with custom file extentions for open (set matching)\n" ..
		       "or saving (configure without matching)\n" ..
		       "You can specify root and start directory",
		    "fileTest")
gc.registerFunction("lua pager test", "pagerTest")
gc.registerFunction("lua custom cel body sel",
		    "gc.celBodyInteractive demo\n" ..
		       "You can specify custom stars, planets, etc for completion",
		    "customBodySet")

-- register undefined function
gc.registerFunction("lua undefined test", "foobar")

-- alias test
-- select moon and goto
gc.registerAlias("lua alias test", "select object", "sol/Earth/moon@*EXEC*@goto object gc",
		 "This is alias demo from lua code (gc.registerAlias)\n" ..
		    "This command will call \"select object\" @sol/Earth/moon@*EXEC*@goto object gc")

-- reregister function test
-- first register
gc.registerFunction("lua reregister test",
		  function (state, s)
		     celestia:flash("not redefine")
		  end)
-- .. also test gc.isFunction
if gc.isFunction("lua reregister test") then
   gc.reRegisterFunction("lua reregister test",
			 "Redefine function demo\n" ..
			    "Use gc.reRegisterFunction to redefine",
			 function (state, s)
			    celestia:flash("Redefined")
			 end)
end



--key bind test
-- simple
gc.bind("C-c l", "goto object")
-- complex: select moon and goto greate circle
gc.bind("C-c s m @Sol/Earth/Moon@*EXEC*@goto object gc@", "select object")

-- unbind test
gc.bind("C-c C-x", "goto object")
gc.unbind("C-c C-x")


-- INTERACTIVES CALLBACKS--

-- listInteractive(string:semicolon-completion, string:history, 
--                 string:prefix-text, string:describe-text,
--                 [number:must-match])
function listTest (state, s)
   if state == 0 then
      gc.listInteractive("class O;class B;class A;class F;class G;class K;class M","test-list", "Spectral class: ","Type spectral class", true);
   elseif state == -1 then
      -- describer for 0 state (i.e -1-state)
      gc.setInfoText("You can describe current prompt by gc.setInfoText\n" ..
		     "Typed: \"" .. s .. "\"")
   elseif state == 1 then
      celestia:flash(s)
      -- you  don't so  need  call  this, just  indicate  that end  of
      -- interactive
      gc.finish()
   end
   return state
end

-- passwordInteractive(string:prefix-text, string:describe-text)
function passwdTest (state, s)
   if state == 0 then
      gc.passwdInteractive("Password", " Password test");
   elseif state == 1 then
      celestia:flash(s)
   end
   return state
end

-- colorChooseInteractive(string:history, string:prefix-text, string:describe-text)
-- use gc.color2HexRGB(s), gc.alphaFromColor(s) to extract rgb color and alpha
function colorChooserTest (state, s)
   if state == 0 then
      gc.colorChooseInteractive("test-color", "Select color", "Color select")
      gc.setColumns(1)
   elseif state == 1 then
      celestia:flash("Hex color: " .. gc.color2HexRGB(s) .. ", Alpha: " .. gc.alphaFromColor(s), 5)
   end
   return state
end

-- celBodyInteractive(string:history, string:prefix-text, string:describe-text)
function celBodyTest (state, s)
   if state == 0 then
      gc.celBodyInteractive("test-body-sel", "Body", "Select object")
      gc.setColumns(5)
   elseif state == 1 then
      celestia:flash(s)
   end
   return state
end

-- listInteractive(string:semicolon-completion, string:history, 
--                 string:prefix-text, string:describe-text,
--                 [number:must-match], [string:delimiter=";/"])
function flagTest (state, s)
   if state == 0 then
      gc.flagInteractive("stars;planets;galaxy;clouds;atmospheres",
			 "test-flag", "Select flag (use ';/' as delimiter)", "Select object", true)
   elseif state == 1 then
      celestia:flash(s)
   end
   return state
end


-- fileInteractive(string:history, string:prefix-text, string:describe-text,
--                 [number:must-match], [string:dir], [string:rootdir="./"], [string:fileExt])
function fileTest (state, s)
   if state == 0 then
      gc.fileInteractive("test-file", "Choose texture", "Select texture (.png, .jpg, .dds) ",
			 true, "textures/", "./", ".png;.dds;.jpg")
      gc.setColumns(3)
      gc.setLastFromHistory()
   elseif state == 1 then
      celestia:flash("Texture " .. s)
   end
   return state
end

-- pagerInteractive(string:text, [string:prefix], [string:describe-text])
function pagerTest (state, s)
   if state == 0 then
      gc.pagerInteractive("                The  pager demo\n\n" .. 
			  "gc.pagerInteractive can be used to show text information.\n" ..
			  "To navigate use key like in `less` command.\n" ..
			  "Press 'h' to display more help.")
   end
   return state
end

function customBodySet (state, s)
   if state == 0 then
      gc.celBodyInteractive("", "Body", "Select object", "Sol/Earth;Sol/Earth/Moon;eps eri/b;eps eri;iss")
   elseif state == 1 then
      obs = celestia:getobserver()
      myObject = celestia:find(s)
      celestia:select(myObject)
   end
   return state
end

-- listTest and passwdTest function is defined, so can register as not string
gc.registerFunction("lua list test",
		    "gc.listInteractive demo\n" ..
		       "Match value from list",
		    listTest)
gc.registerFunction("lua password test",
		    "gc.passwdInteractive demo\n" ..
		       "History here not available",
		    passwdTest)

-- some more complex function
gc.registerFunction("lua mark and goto",
		    "Select and mark body than do\n" ..
		       "gc.call(\"goto object\") to goto",
		    function  (state, s)
		       if state == 0 then
			  gc.celBodyInteractive("", "Target ", "Select body to goto")
			  gc.setColumns(8)
		       elseif state == 1 then
			  obs = celestia:getobserver()
			  myObject = celestia:find(s)
			  celestia:select(myObject)
			  gc.colorChooseInteractive("color", "Select color", "Color select")
		       elseif state == 2 then
			  sel = celestia:getselection()
			  color = gc.color2HexRGB(s)
			  sel:mark(color, "diamond", 15)
			  celestia:flash(color)			  
			  -- gc.call  will  finish  current inter.  do
			  -- gc.finish() first
			  gc.call("goto object")
		       end
		       return state
		    end
		 )
